// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TecoApi.Data;

#nullable disable

namespace TecoApi.Migrations
{
    [DbContext(typeof(TecoContext))]
    [Migration("20251013215240_ChangeRequiredToNullableChat")]
    partial class ChangeRequiredToNullableChat
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TecoApi.Models.Entities.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Complement")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Number")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("TecoApi.Models.Entities.ChatMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsProposal")
                        .HasColumnType("boolean");

                    b.Property<long?>("ProposalId")
                        .HasColumnType("bigint");

                    b.Property<long>("RequestId")
                        .HasColumnType("bigint");

                    b.Property<long>("SenderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.HasIndex("SenderId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("TecoApi.Models.Entities.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("ClientConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FinishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ProposalId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProviderId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RequesterId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProposalId")
                        .IsUnique();

                    b.HasIndex("ProviderId");

                    b.HasIndex("RequesterId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("TecoApi.Models.Entities.Proposal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<long?>("ChatMessageId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<long>("ProviderId")
                        .HasColumnType("bigint");

                    b.Property<long>("RequestId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ChatMessageId")
                        .IsUnique();

                    b.HasIndex("ProviderId");

                    b.HasIndex("RequestId");

                    b.ToTable("Proposals");
                });

            modelBuilder.Entity("TecoApi.Models.Entities.Provider", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<float?>("PriceBase")
                        .HasColumnType("real");

                    b.PrimitiveCollection<string[]>("Skills")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("WorkAddressId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex("WorkAddressId")
                        .IsUnique();

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("TecoApi.Models.Entities.Request", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.PrimitiveCollection<string[]>("Photos")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<long>("RequesterId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ServiceAddressId")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("RequesterId");

                    b.HasIndex("ServiceAddressId")
                        .IsUnique();

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("TecoApi.Models.Entities.Requester", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Requesters");
                });

            modelBuilder.Entity("TecoApi.Models.Entities.Review", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProviderId")
                        .HasColumnType("bigint");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<long>("RequesterId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("ProviderId");

                    b.HasIndex("RequesterId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("TecoApi.Models.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CNPJ")
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)");

                    b.Property<string>("CPF")
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("PersonalAddressId")
                        .HasColumnType("bigint");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PersonalAddressId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TecoApi.Models.Entities.ChatMessage", b =>
                {
                    b.HasOne("TecoApi.Models.Entities.Request", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TecoApi.Models.Entities.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("TecoApi.Models.Entities.Order", b =>
                {
                    b.HasOne("TecoApi.Models.Entities.Proposal", "Proposal")
                        .WithOne("Order")
                        .HasForeignKey("TecoApi.Models.Entities.Order", "ProposalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TecoApi.Models.Entities.Provider", null)
                        .WithMany("Orders")
                        .HasForeignKey("ProviderId");

                    b.HasOne("TecoApi.Models.Entities.Requester", null)
                        .WithMany("Orders")
                        .HasForeignKey("RequesterId");

                    b.Navigation("Proposal");
                });

            modelBuilder.Entity("TecoApi.Models.Entities.Proposal", b =>
                {
                    b.HasOne("TecoApi.Models.Entities.ChatMessage", "ChatMessage")
                        .WithOne("Proposal")
                        .HasForeignKey("TecoApi.Models.Entities.Proposal", "ChatMessageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TecoApi.Models.Entities.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TecoApi.Models.Entities.Request", "Request")
                        .WithMany("Proposals")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatMessage");

                    b.Navigation("Provider");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("TecoApi.Models.Entities.Provider", b =>
                {
                    b.HasOne("TecoApi.Models.Entities.User", "User")
                        .WithOne("Provider")
                        .HasForeignKey("TecoApi.Models.Entities.Provider", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TecoApi.Models.Entities.Address", "WorkAddress")
                        .WithOne()
                        .HasForeignKey("TecoApi.Models.Entities.Provider", "WorkAddressId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");

                    b.Navigation("WorkAddress");
                });

            modelBuilder.Entity("TecoApi.Models.Entities.Request", b =>
                {
                    b.HasOne("TecoApi.Models.Entities.Requester", "Requester")
                        .WithMany("Requests")
                        .HasForeignKey("RequesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TecoApi.Models.Entities.Address", "ServiceAddress")
                        .WithOne()
                        .HasForeignKey("TecoApi.Models.Entities.Request", "ServiceAddressId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Requester");

                    b.Navigation("ServiceAddress");
                });

            modelBuilder.Entity("TecoApi.Models.Entities.Requester", b =>
                {
                    b.HasOne("TecoApi.Models.Entities.User", "User")
                        .WithOne("Requester")
                        .HasForeignKey("TecoApi.Models.Entities.Requester", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TecoApi.Models.Entities.Review", b =>
                {
                    b.HasOne("TecoApi.Models.Entities.Order", "Order")
                        .WithOne("Review")
                        .HasForeignKey("TecoApi.Models.Entities.Review", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TecoApi.Models.Entities.Provider", "Provider")
                        .WithMany("Reviews")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TecoApi.Models.Entities.Requester", "Requester")
                        .WithMany("Reviews")
                        .HasForeignKey("RequesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Provider");

                    b.Navigation("Requester");
                });

            modelBuilder.Entity("TecoApi.Models.Entities.User", b =>
                {
                    b.HasOne("TecoApi.Models.Entities.Address", "PersonalAddress")
                        .WithOne()
                        .HasForeignKey("TecoApi.Models.Entities.User", "PersonalAddressId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("PersonalAddress");
                });

            modelBuilder.Entity("TecoApi.Models.Entities.ChatMessage", b =>
                {
                    b.Navigation("Proposal");
                });

            modelBuilder.Entity("TecoApi.Models.Entities.Order", b =>
                {
                    b.Navigation("Review");
                });

            modelBuilder.Entity("TecoApi.Models.Entities.Proposal", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("TecoApi.Models.Entities.Provider", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("TecoApi.Models.Entities.Request", b =>
                {
                    b.Navigation("Proposals");
                });

            modelBuilder.Entity("TecoApi.Models.Entities.Requester", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Requests");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("TecoApi.Models.Entities.User", b =>
                {
                    b.Navigation("Provider");

                    b.Navigation("Requester");
                });
#pragma warning restore 612, 618
        }
    }
}
